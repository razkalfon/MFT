import type { ModuleOptionsWithValidateTrue, ModuleOptionsWithValidateFalse, ModuleThis } from "../lib/moduleCommon.js";
export declare const FundamentalsTimeSeries_Types: string[];
export declare const FundamentalsTimeSeries_Modules: string[];
export type FundamentalsTimeSeriesResults = Array<FundamentalsTimeSeriesResult>;
export interface FundamentalsTimeSeriesResult {
    [key: string]: unknown;
    date: Date;
}
export interface FundamentalsTimeSeriesOptions {
    period1: Date | number | string;
    period2?: Date | number | string;
    type?: string;
    merge?: boolean;
    padTimeSeries?: boolean;
    lang?: string;
    region?: string;
    module: string;
}
export default function fundamentalsTimeSeries(this: ModuleThis, symbol: string, queryOptionsOverrides: FundamentalsTimeSeriesOptions, moduleOptions?: ModuleOptionsWithValidateTrue): Promise<FundamentalsTimeSeriesResult>;
export default function fundamentalsTimeSeries(this: ModuleThis, symbol: string, queryOptionsOverrides: FundamentalsTimeSeriesOptions, moduleOptions?: ModuleOptionsWithValidateFalse): Promise<any>;
/**
 * Transform the input options into query parameters.
 * The options module defines which keys that are used in the query.
 * The keys are joined together into the query parameter type and
 * pre-fixed with the options type (e.g. annualTotalRevenue).
 * @param queryOptions Input query options.
 * @returns Query parameters.
 */
export declare const processQuery: (queryOptions: FundamentalsTimeSeriesOptions) => Partial<FundamentalsTimeSeriesOptions>;
/**
 * Transforms the time-series into an array with reported values per period.
 * Each object represents a period and its properties are the data points.
 * Financial statement content variates and keys are skipped when empty.
 * The query keys include the option type  (e.g. annualTotalRevenue).
 * In the response the type is removed (e.g. totalRevenue) for
 * easier mapping by the client.
 * @param response Query response.
 * @returns Formatted response.
 */
export declare const processResponse: (response: any) => any;
